<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
	<channel>
		<title>Fanioz Blog</title>
		<link>http://fanioz.github.io/</link>
		<description>Welcome!</description>
		<copyright>2020</copyright>
		<pubDate>Mon, 02 Mar 2020 12:32:11 GMT</pubDate>
		<lastBuildDate>Mon, 02 Mar 2020 12:32:11 GMT</lastBuildDate>
		<item>
			<title>Vue Components</title>
			<link>http://fanioz.github.io/posts/vue-components</link>
			<description>&lt;p&gt;Components are Vue Instances&lt;/p&gt;</description>
			<author>Johan Vergeer</author>
			<guid>http://fanioz.github.io/posts/vue-components</guid>
			<pubDate>Wed, 19 Jun 2019 00:00:00 GMT</pubDate>
			<content:encoded>&lt;blockquote class="blockquote"&gt;
&lt;p&gt;Components are Vue Instances&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Let's start with a simple Vue application. This is the most basic application you could get.&lt;/p&gt;
&lt;?# Gist f18b4f9e9785496326c082b78c76ef23 File="simple-vue-app.js" /?&gt;
&lt;h1 id="global-components"&gt;Global components&lt;/h1&gt;
&lt;?# Gist f18b4f9e9785496326c082b78c76ef23 File="separate-component.js" /?&gt;
&lt;h2 id="global-component-limitations"&gt;Global component limitations&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Global variables cause problems because they can be hard to locate and it is easy to run into naming conflicts&lt;/li&gt;
&lt;li&gt;Global components use &lt;em&gt;String Templates&lt;/em&gt;, which means all html has to be defined in a Javascript string
&lt;ul&gt;
&lt;li&gt;No syntax highligting&lt;/li&gt;
&lt;li&gt;Lot of escaping the html&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CSS is not encapsulated, which makes us rely on global CSS styling&lt;/li&gt;
&lt;li&gt;Global components don't provide any build-time compilation support. This means preprocessing is impossible.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Global components are fine for small applications and prototyping, but for larger applications we should use Single-file comopents.&lt;/p&gt;
&lt;h1 id="simgle-file-components"&gt;Simgle-file components&lt;/h1&gt;
&lt;blockquote class="blockquote"&gt;
&lt;p&gt;A single-file component is a file with a &lt;em&gt;.vue&lt;/em&gt; extension.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It typically includes three secions: template, script and style&lt;/p&gt;
&lt;?# Gist f18b4f9e9785496326c082b78c76ef23 File="vue-component-sections.js" /?&gt;
&lt;p&gt;Typically single-file components are used in a Vue application.&lt;/p&gt;
</content:encoded>
		</item>
		<item>
			<title>What is the Guid in .NET?</title>
			<link>http://fanioz.github.io/posts/net-guid-uuid-version</link>
			<description>&lt;p&gt;After having done some online reseach I found that a Guid in .NET is probably a UUID version 4. Let's put that to the test.&lt;/p&gt;</description>
			<author>Johan Vergeer</author>
			<guid>http://fanioz.github.io/posts/net-guid-uuid-version</guid>
			<pubDate>Sun, 26 May 2019 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;After having done some online reseach I found that a Guid in .NET is probably a UUID version 4. Let's put that to the test.&lt;/p&gt;
&lt;p&gt;I found several online resources that say something about .NET's &lt;code&gt;System.Guid&lt;/code&gt;. Some of them are spot on, but not complete, but most of them say is't Microsofts implementation of a &lt;a href="https://web.archive.org/web/20060615195933/http://www.webdav.org/specs/draft-leach-uuids-guids-01.txt"&gt;UUID&lt;/a&gt;. These explanations are also right, but not complete. So here is my take on &lt;code&gt;System.Guid&lt;/code&gt;. First to get the obvious out of the way. &lt;em&gt;GUID&lt;/em&gt; is an acronym for &lt;em&gt;Globally Unique Identifier&lt;/em&gt; and &lt;em&gt;UUID&lt;/em&gt; for &lt;em&gt;Universally Unique Identifier&lt;/em&gt;. Nice to know but not very helpful. As you already know it is used by Microsoft in the .NET ecosystem. A lot of people seem to think it is exclusively used by Microsoft, but that's not true. It is also used by Oracle which has &lt;a href="https://docs.oracle.com/cd/B12037_01/server.101/b10759/functions153.htm"&gt;&lt;code&gt;SYS_GUID&lt;/code&gt;&lt;/a&gt; and C++ has a &lt;a href="https://docs.microsoft.com/en-us/windows/desktop/api/combaseapi/nf-combaseapi-cocreateguid"&gt;&lt;code&gt;CoCreateGuide()&lt;/code&gt;&lt;/a&gt; function. I'm sure there are more implementation that use Guid, but I haven't looked for them since that's not the point of this post.&lt;/p&gt;
&lt;p&gt;I found a post on MSDN&lt;a id="fnref:1" href="#fn:1" class="footnote-ref"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; with a discussion whether &lt;code&gt;System.Guid&lt;/code&gt; produces a UUID version 4, but even that thread couldn't rule everything out. So I wrote a simple script to put it to the test. The proposed standard on IETF&lt;a id="fnref:2" href="#fn:2" class="footnote-ref"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; states &lt;em&gt;the UUID version is in the most significant 4 bits of the time stamp (bits 4 through 7 of the time_hi_and_version field)&lt;/em&gt;. This means it should be the fifteenth character in the UUID. So let's print out a couple of Guids to the console and have a look:&lt;/p&gt;
&lt;?# Gist 7206ed44b09a8cc0c2a49f32ee8c3b40 File="a-list-of-guids-version-4" /?&gt;
&lt;h2 id="lets-put-it-to-the-test"&gt;Let's put it to the test&lt;/h2&gt;
&lt;p&gt;The example above looks like &lt;code&gt;System.Guid&lt;/code&gt; is indeed a version 4 UUID. But then again, printing out 10 items doesn't really rule out that other values might occur, so lets print a couple more. I created a console application with the following script, which will generate 10 million Guids and verify whether each Guid is indeed a UUID version 4. Each time a Guid is found that isn't version 4 the &lt;code&gt;Errors found&lt;/code&gt; value will increase.&lt;/p&gt;
&lt;?# Gist 7206ed44b09a8cc0c2a49f32ee8c3b40 File="Program.cs" /?&gt;
&lt;p&gt;This shows the output below. I ran this test a couple of times and the results are the same every time I ran it. The conclusion I can draw from is this that it is &lt;strong&gt;very&lt;/strong&gt; likely that &lt;code&gt;System.Guid&lt;/code&gt; is a UUID version 4.&lt;/p&gt;
&lt;?# Gist 7206ed44b09a8cc0c2a49f32ee8c3b40 File="test-results-10-million-guids" /?&gt;
&lt;h2 id="uuid"&gt;UUID&lt;/h2&gt;
&lt;p&gt;Now that we know &lt;code&gt;System.Guid&lt;/code&gt; is a UUID version 4, let's see what that means. After looking at the specification&lt;a id="fnref:3" href="#fn:3" class="footnote-ref"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt; I draw this conclusion:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;All UUID are fixed-size 128-bits&lt;/li&gt;
&lt;li&gt;A UUID uses the IEEE 802 address (MAC Address) which is usually available on all network attached systems&lt;/li&gt;
&lt;li&gt;The table below shows how the format of a UUID. (An octed is equivalent to a byte)&lt;/li&gt;
&lt;/ul&gt;
&lt;table class="table"&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Field&lt;/th&gt;
&lt;th&gt;Data Type&lt;/th&gt;
&lt;th&gt;Octet #&lt;/th&gt;
&lt;th&gt;Note&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;time_low&lt;/td&gt;
&lt;td&gt;unsigned 32 bit integer&lt;/td&gt;
&lt;td&gt;0-3&lt;/td&gt;
&lt;td&gt;The low field of the timestamp.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;time_mid&lt;/td&gt;
&lt;td&gt;unsigned 16 bit integer&lt;/td&gt;
&lt;td&gt;4-5&lt;/td&gt;
&lt;td&gt;The middle field of the timestamp.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;time_hi_and_version&lt;/td&gt;
&lt;td&gt;unsigned 16 bit integer&lt;/td&gt;
&lt;td&gt;6-7&lt;/td&gt;
&lt;td&gt;The high field of the timestamp multiplexed with the version number.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;clock_seq_hi_and_reserved&lt;/td&gt;
&lt;td&gt;unsigned 8 bit integer&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;The high field of theclock sequence multiplexed with the variant.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;clock_seq_low&lt;/td&gt;
&lt;td&gt;unsigned 8 bit integer&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;The low field of the clock sequence.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;node&lt;/td&gt;
&lt;td&gt;unsigned 48 bit integer&lt;/td&gt;
&lt;td&gt;10-15&lt;/td&gt;
&lt;td&gt;The spatially unique node identifier.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;So how does this look? Here is an example with a breakdown. As we have already seen before, the time stamp is in the most significant 4 bits of time_hi_and_version.&lt;/p&gt;
&lt;?# Gist 7206ed44b09a8cc0c2a49f32ee8c3b40 File="uuid-breakdown" /?&gt;
&lt;h3 id="uuid-version-4"&gt;UUID Version 4&lt;/h3&gt;
&lt;p&gt;So far everything is the same for each UUID version. Let's look at some traits that are specific to a UUID Version 4.&lt;/p&gt;
&lt;h4 id="algorithm"&gt;Algorithm&lt;/h4&gt;
&lt;p&gt;The version 4 UUID is meant for generating UUIDs from truly-random or pseudo-random numbers.&lt;/p&gt;
&lt;p&gt;The algorithm is as follows &lt;a id="fnref:4" href="#fn:4" class="footnote-ref"&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Set the two most significant bits (bits 6 and 7) of the clock_seq_hi_and_reserved to zero and one, respectively.&lt;/li&gt;
&lt;li&gt;Set the four most significant bits (bits 12 through 15) of the time_hi_and_version field to the 4-bit version as described above.&lt;/li&gt;
&lt;li&gt;Set all the other bits to randomly (or pseudo-randomly) chosen values.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I haven't been able to find the exact implementation of &lt;code&gt;System.Guid.NewGuid()&lt;/code&gt;, so if you can help me out here that would be great.&lt;/p&gt;
&lt;h4 id="number-of-unique-values"&gt;Number of unique values&lt;/h4&gt;
&lt;p&gt;Give the information above I made the following calculation:&lt;/p&gt;
&lt;p&gt;A UUID is 128 bits, but UUID version 4 (a GUID) uses 4 bits for the version and two more bits in clock_seq_hi_and_reserved. Leaving us 122 bits left to work with.
So this gives us &lt;code&gt;2^122&lt;/code&gt; or about &lt;code&gt;5.32 * 10^37&lt;/code&gt; possibilities. This is a huge number, so let's try to put this into some perspecive.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It's about &lt;code&gt;7 * 10^26&lt;/code&gt; possibilities for each person on the planet.&lt;/li&gt;
&lt;li&gt;If every person on the planet would generate &lt;code&gt;2.23 * 10^17&lt;/code&gt; or &lt;code&gt;223.901.956.150.523.000&lt;/code&gt; GUIDs every second for the next 100 years, then we would almost reach the maximum number of possibilities.&lt;/li&gt;
&lt;li&gt;That's almost an Quintillion possibilities for each second for every person on the planet in the next 100 years.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let's just be honest, that is a huge number. But still, since the values are randomly generated, it's not possible to guarantee a value.&lt;/p&gt;
&lt;p&gt;There you have it. My definition of a Guid you can use in C#.&lt;/p&gt;
&lt;p&gt;If you have any other insights on this topic or you found a mistake, please let me know in the comments.&lt;/p&gt;
&lt;h4 id="sources"&gt;Sources&lt;/h4&gt;
&lt;div class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;&lt;a href="https://social.msdn.microsoft.com/Forums/en-US/4956142a-0a5d-4f1e-b102-93a3eea1b5d5/does-guidnewguid-produce-uuid-version-4-according-to-rfc4122?forum=netfxbcl"&gt;Thread on MSDN on System.Guid&lt;/a&gt;&lt;a href="#fnref:1" class="footnote-back-ref"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;&lt;a href="https://tools.ietf.org/html/rfc4122#section-4.1.3"&gt;IETF proposed UUID Standard&lt;/a&gt;&lt;a href="#fnref:2" class="footnote-back-ref"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:3"&gt;
&lt;p&gt;&lt;a href="https://web.archive.org/web/20060615195933/http://www.webdav.org/specs/draft-leach-uuids-guids-01.txt"&gt;UUIDs and GUIDs&lt;/a&gt;&lt;a href="#fnref:3" class="footnote-back-ref"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:4"&gt;
&lt;p&gt;&lt;a href="https://tools.ietf.org/html/rfc4122#section-4.4"&gt;UUID Version 4 algorithm&lt;/a&gt;&lt;a href="#fnref:4" class="footnote-back-ref"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content:encoded>
		</item>
		<item>
			<title>ASP.NET Core API Unit Tests</title>
			<link>http://fanioz.github.io/posts/asp-net-core-api-unit-tests</link>
			<description>&lt;p&gt;ASP.NET Core API Controllers are just classes, which means they can be unit tested.&lt;/p&gt;</description>
			<author>Johan Vergeer</author>
			<guid>http://fanioz.github.io/posts/asp-net-core-api-unit-tests</guid>
			<pubDate>Sun, 19 May 2019 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;ASP.NET Core API Controllers are just classes, which means they can be unit tested.&lt;/p&gt;
&lt;p&gt;This can be explained best with an example.&lt;/p&gt;
&lt;h3 id="person-model"&gt;Person Model&lt;/h3&gt;
&lt;p&gt;We'll start off with a &lt;code&gt;Person&lt;/code&gt;  model.&lt;/p&gt;
&lt;?# Gist 300a7aebba5bfd1b62f4fb2f468533ca /?&gt;
&lt;p&gt;This model has a &lt;code&gt;Name&lt;/code&gt; and an &lt;code&gt;Age&lt;/code&gt; property. It also has an &lt;code&gt;IsValid&lt;/code&gt; property, returning whether the model is in a valid state.
This last property will be used later when we will work on the &lt;code&gt;Post&lt;/code&gt; request.&lt;/p&gt;
&lt;h3 id="ipersonrepository"&gt;IPersonRepository&lt;/h3&gt;
&lt;p&gt;I have only created the repository interface because an implementation is not required for these tests.
The methods are self-explanatory so I won't go into any detail here.&lt;/p&gt;
&lt;?# Gist 89cb91b85a273bd5a472900f56988edf /?&gt;
&lt;h3 id="personcontroller"&gt;PersonController&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;PersonController&lt;/code&gt; serves as the API endpoint.
The &lt;code&gt;Get()&lt;/code&gt; method returns all people from the repository, and the &lt;code&gt;Post()&lt;/code&gt; method allows a new &lt;code&gt;Person&lt;/code&gt; to be added to the repository. Note a &lt;code&gt;BadRequest&lt;/code&gt; is returned when the &lt;code&gt;IsValid&lt;/code&gt; property on the &lt;code&gt;Person&lt;/code&gt; model is &lt;code&gt;false&lt;/code&gt;. Also note the &lt;code&gt;IPersonRepository&lt;/code&gt; interface is passed in to the constructor. I'll get back on this later when we'll look at the tests.&lt;/p&gt;
&lt;?# Gist b515c0ff18a6bd695080f0c01190508d /?&gt;
&lt;h2 id="tests"&gt;Tests&lt;/h2&gt;
&lt;?# Note ?&gt;
&lt;p&gt;I'm using &lt;a href="https://xunit.net/"&gt;xUnit.Net&lt;/a&gt;, &lt;a href="https://fluentassertions.com/"&gt;FluentAssertions&lt;/a&gt; and &lt;a href="https://github.com/Moq/moq4/wiki/Quickstart"&gt;Moq&lt;/a&gt; for these tests.&lt;/p&gt;
&lt;?#/ Note ?&gt;
&lt;p&gt;Let's have a look at the tests. As I stated before, we're passing in the &lt;code&gt;IPersonRepository&lt;/code&gt; interface to the constructor of &lt;code&gt;PersonController&lt;/code&gt;. But we don't have an implementation for &lt;code&gt;IPersonRepository&lt;/code&gt;. This is on purpose, sinse we want to test the controllers implementation, and not an implementation of &lt;code&gt;IPersonRepository&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For this reason we'll use &lt;a href="https://github.com/Moq/moq4/wiki/Quickstart"&gt;Moq&lt;/a&gt;, which is an awesome library we will use to create a mock &lt;code&gt;IPersonRepository&lt;/code&gt;. The following code snippet shows how mock the repository is instantiated.&lt;/p&gt;
&lt;?# Gist 11795a249d1589e0bd43ba3119366e47 /?&gt;
&lt;h3 id="get-all-people-empty-list"&gt;Get all people - empty list&lt;/h3&gt;
&lt;p&gt;For the first test we'll expect an empty list of &lt;code&gt;Person&lt;/code&gt;. Before creating the &lt;code&gt;PersonController&lt;/code&gt;, we have to setup the &lt;code&gt;Mock&lt;/code&gt; object to return an empty &lt;code&gt;List&amp;lt;Person&amp;gt;&lt;/code&gt; when &lt;code&gt;FindAll()&lt;/code&gt; is called.&lt;/p&gt;
&lt;?# Warning ?&gt;
&lt;p&gt;If we don't setup the mock, it will return null and throw an &lt;code&gt;ArgumentNullException&lt;/code&gt; when &lt;code&gt;ToList()&lt;/code&gt; is called in the controller.&lt;/p&gt;
&lt;?#/ Warning ?&gt;
&lt;p&gt;After the controllers &lt;code&gt;Get()&lt;/code&gt; method is called we assert the expected return type and whether the returned list is really empty.&lt;/p&gt;
&lt;?# Gist ccafc0ad059dea8e01ff419eb69de555 /?&gt;
&lt;h3 id="get-all-people-people-are-returned"&gt;Get all people - people are returned&lt;/h3&gt;
&lt;p&gt;The next test we'll expect three &lt;code&gt;Person&lt;/code&gt; objects. The &lt;code&gt;people&lt;/code&gt; object we created is used in the &lt;code&gt;Returns()&lt;/code&gt; method of the repository setup. This tells Moq to return the people whenever the &lt;code&gt;FindAll()&lt;/code&gt; method is called on &lt;code&gt;IPersonRepository&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;After the controllers &lt;code&gt;Get()&lt;/code&gt; method is called we assert the expected return type again, but this time we expect three &lt;code&gt;Person&lt;/code&gt; objects, which should be equivalent to the &lt;code&gt;people&lt;/code&gt; object we passed into the &lt;code&gt;Returns()&lt;/code&gt; method of the repository setup.&lt;/p&gt;
&lt;p&gt;Now that this works, let's see how we can add a &lt;code&gt;Person&lt;/code&gt;.&lt;/p&gt;
&lt;?# Gist 3fda5518c8b97c6fa1c1045df5f22b8b /?&gt;
&lt;h3 id="post-a-person-person-has-valid-state"&gt;Post a person - Person has valid state&lt;/h3&gt;
&lt;p&gt;After retrieving people from the API, it would also be nice if we can add people. That will be tested next.&lt;/p&gt;
&lt;p&gt;In this first test, which is a happy flow, the &lt;code&gt;Person&lt;/code&gt; object will be added. Since the &lt;code&gt;Add()&lt;/code&gt; method on &lt;code&gt;IPersonRepository&lt;/code&gt; doesn't return anything, we don't have to do a setup. So we just &lt;code&gt;Post&lt;/code&gt; a &lt;code&gt;Peron&lt;/code&gt; object, after which we assert whether we response is an &lt;code&gt;OkObjectResult&lt;/code&gt; and has a valid message. One thing we &lt;strong&gt;do&lt;/strong&gt; want to verify here though, is whether the &lt;code&gt;Add()&lt;/code&gt; method was called on &lt;code&gt;IPersonRepository&lt;/code&gt; once and only once.&lt;/p&gt;
&lt;?# Gist 1602b7cca1ab50b45480f1ffd0f64e98 /?&gt;
&lt;h3 id="post-a-person-person-has-invalid-state"&gt;Post a person - Person has invalid state&lt;/h3&gt;
&lt;p&gt;In this last test, we have to see what happens if the &lt;code&gt;Person&lt;/code&gt; doesn't have a valid state, which we'll test by not setting the &lt;code&gt;Name&lt;/code&gt; property. In this case we assert whether the returned result is a &lt;code&gt;BadRequestObjectResult&lt;/code&gt; and has a valid message. A more important assertion to note here is that we verify the &lt;code&gt;Add()&lt;/code&gt; method on &lt;code&gt;IPersonRepository&lt;/code&gt; is &lt;strong&gt;Never&lt;/strong&gt; called.&lt;/p&gt;
&lt;?# Gist a0d88a8857827cdc7d7ff9c23d698beb /?&gt;
&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;As you can see, we can test an API controller without any integration to other components of the application. We didn't even need an implementation for the repository. This way we have a fast and loosely coupled way to test our controllers.&lt;/p&gt;
&lt;p&gt;The code for this project is located in the &lt;a href="https://github.com/johanvergeer/ImJohan.Blog.AspNetCoreApiUnitTests"&gt;GitHub repo&lt;/a&gt;.&lt;/p&gt;
</content:encoded>
		</item>
		<item>
			<title>Exception handling</title>
			<link>http://fanioz.github.io/posts/exception-handling</link>
			<description>&lt;p&gt;A couple of weeks ago I had a discussion with one of my colleagues about exception handling. What we agreed on is that an exception should be thrown when an event occurs the system cannot recover from. Even so, exception handling is often used to pass.&lt;/p&gt;</description>
			<author>Johan Vergeer</author>
			<guid>http://fanioz.github.io/posts/exception-handling</guid>
			<pubDate>Sun, 07 Apr 2019 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;A couple of weeks ago I had a discussion with one of my colleagues about exception handling. What we agreed on is that an exception should be thrown when an event occurs the system cannot recover from. Even so, exception handling is often used to pass.&lt;/p&gt;
&lt;p&gt;There are a couple of disadvantages of throwing exceptions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Exceptions are costly&lt;/li&gt;
&lt;li&gt;You cannot tell if a method will throw an exception just by looking at it&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="the-cost-of-exceptions"&gt;The cost of exceptions&lt;/h1&gt;
&lt;p&gt;I created a very simple test to measure the difference between returning a boolean and throwing an exception. I'm aware that this test might be very trivial, but I think it gives a good first impression.&lt;/p&gt;
&lt;p&gt;This is the code I used for this test. The first one throws an exception, which is caught. The second one returns a boolean indicating whether the operation was successful.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;class Program
{
    static void Main(string[] args)
    {
        CatchException();
    }

    private static void CatchException()
    {
        try
        {
            ThrowException();
            Console.WriteLine(&amp;quot;No exception occurred&amp;quot;);
        }
        catch (Exception e)
        {
            Console.WriteLine(&amp;quot;An exception occurred&amp;quot;);
            Console.ReadKey();
        }
    }

    private static void ThrowException()
    {
        throw new Exception(&amp;quot;Exception thrown&amp;quot;);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;class Program
{
    static void Main(string[] args)
    {
        CatchBool();
    }

    private static void CatchBool()
    {
        var isSuccess = ReturnBool();

        Console.WriteLine(isSuccess ? &amp;quot;No exception occurred&amp;quot; : &amp;quot;An exception occurred&amp;quot;);
        Console.ReadKey();
    }

    private static bool ReturnBool()
    {
        return true;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The measurements were done with the Visual Studio 2017 builtin profiler. When running these tests the results were the same each time. These results are shown in the table below.&lt;/p&gt;
&lt;table class="table"&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Measurement&lt;/th&gt;
&lt;th&gt;Objects&lt;/th&gt;
&lt;th&gt;Objects Diff&lt;/th&gt;
&lt;th&gt;Heap size&lt;/th&gt;
&lt;th&gt;Heap size diff&lt;/th&gt;
&lt;th&gt;CPU %&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Start&lt;/td&gt;
&lt;td&gt;360&lt;/td&gt;
&lt;td&gt;n/a&lt;/td&gt;
&lt;td&gt;65.44 KB&lt;/td&gt;
&lt;td&gt;n/a&lt;/td&gt;
&lt;td&gt;n/a&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Exception thrown&lt;/td&gt;
&lt;td&gt;657&lt;/td&gt;
&lt;td&gt;+297 (45%)&lt;/td&gt;
&lt;td&gt;90.63 KB&lt;/td&gt;
&lt;td&gt;+25.19 KB (28%)&lt;/td&gt;
&lt;td&gt;50%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Bool returned&lt;/td&gt;
&lt;td&gt;416&lt;/td&gt;
&lt;td&gt;+56  (13%)&lt;/td&gt;
&lt;td&gt;72.44 KB&lt;/td&gt;
&lt;td&gt;+7.00 KB  (10%)&lt;/td&gt;
&lt;td&gt;25%&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;As you can see, even for this very simple example, throwing an exception is far more expensive then returning a boolean.&lt;/p&gt;
&lt;h1 id="code-intent"&gt;Code intent&lt;/h1&gt;
&lt;p&gt;It is very hard to figure out what exceptions are thrown just by looking at a method. This goes against this quote from Grady Booch:&lt;/p&gt;
&lt;blockquote class="blockquote"&gt;
&lt;p&gt;“Clean code is simple and direct. Clean code reads like well-written prose. Clean code never obscures the designer’s intent but rather is full of crisp abstractions and straightforward lines of control.&amp;quot;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id="when-to-use-exceptions"&gt;When to use exceptions?&lt;/h1&gt;
&lt;p&gt;Should we even still use exceptions, since they are so expensive and are very bad in sharing code intent? The answer to this is yes, we should. When should we use exceptions? Whenever something occurs in the normal flow of our program that the system cannot recover from.&lt;/p&gt;
&lt;p&gt;Some good examples when to use an exception:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The database is not available&lt;/li&gt;
&lt;li&gt;Out of memory&lt;/li&gt;
&lt;li&gt;Null pointer&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Some examples when you should not thrown an exception:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;User is not logged in. Route the user to a login page&lt;/li&gt;
&lt;li&gt;A page does not exist. Let the user know the page does not exist&lt;/li&gt;
&lt;li&gt;Duplicate key. Let the user know the key is already in use&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="conclusion"&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;As with all things in programming, and in life, it depends on the situation whether you should use an exception or another design pattern. Just don't be a lazy programmer that throws an exception whenever it feels most convenient.&lt;/p&gt;
</content:encoded>
		</item>
		<item>
			<title>ASP.NET Core seeding the database</title>
			<link>http://fanioz.github.io/posts/asp-net-core-seeding-databse</link>
			<description>&lt;p&gt;It can be useful to seed the database with initial data. In this post we'll take a look at one way of achieving this.&lt;/p&gt;</description>
			<author>Johan Vergeer</author>
			<guid>http://fanioz.github.io/posts/asp-net-core-seeding-databse</guid>
			<pubDate>Sun, 31 Mar 2019 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;It can be useful to seed the database with initial data. In this post we'll take a look at one way of achieving this.&lt;/p&gt;
&lt;h2 id="domain-model"&gt;Domain model&lt;/h2&gt;
&lt;p&gt;In this example we'll use a simple domain model.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;class Person
{
    public string FirstName { get; set; }
    public string LastName { get; set; }
    public int Age { get; set; }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="dbcontext"&gt;DbContext&lt;/h2&gt;
&lt;p&gt;Before seeding the database we have to let &lt;code&gt;DbContext&lt;/code&gt; know about our &lt;code&gt;Person&lt;/code&gt; model.&lt;/p&gt;
&lt;?# Note ?&gt;
&lt;p&gt;This post won't go into any detail about &lt;code&gt;DbContext&lt;/code&gt;. If you would like to have more information you can read about it on &lt;a href="https://docs.microsoft.com/en-us/ef/core/miscellaneous/configuring-dbcontext"&gt;Microsoft Docs about Configuring a DbContext&lt;/a&gt;&lt;/p&gt;
&lt;?#/ Note ?&gt;
&lt;p&gt;This is a very simple &lt;code&gt;DbContext&lt;/code&gt; implementation for this example.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public class MyDbContext : DbContext
{
    public MyDbContext() : base()
    {
    }

    public MyDbContext(DbContextOptions options) : base(options)
    {
    }

    public virtual DbSet&amp;lt;Person&amp;gt; People { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity&amp;lt;Person&amp;gt;().ToTable(&amp;quot;People&amp;quot;);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="connection-string-and-building-the-database"&gt;Connection string and building the database&lt;/h2&gt;
&lt;p&gt;Without going into too much detail, I'll show you how to setup the connection string and build the database.&lt;/p&gt;
&lt;p&gt;First you need to set the connection string in &lt;code&gt;appsettings.json&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-json"&gt;&amp;quot;ConnectionStrings&amp;quot;: {
    &amp;quot;DefaultConnection&amp;quot;:  &amp;quot;Server=(localdb)\\mssqllocaldb;Database=MyDatabase;Trusted_Connection=True;MultipleActiveResultSets=true&amp;quot; 
} 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next you need to add &lt;code&gt;MyDbContext&lt;/code&gt; to the &lt;code&gt;ConfigureServices()&lt;/code&gt; method of the &lt;code&gt;Startup()&lt;/code&gt; class.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public void ConfigureServices(IServiceCollection services)
{
    // Get the connection string from appsettings.json
    var connection = Configuration.GetConnectionString(&amp;quot;DefaultConnection&amp;quot;) ?? &amp;quot;testingconnection&amp;quot;;

    // Add MyDbContext to the service collection and tell it to use Sql Server as a database provider
    services.AddDbContext&amp;lt;MyDbContext&amp;gt;(options =&amp;gt;
        options.UseSqlServer(connection)
    );

    // Some other settings
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally you can create the migrations and update the database&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;&amp;gt; dotnet ef migrations add AddPersonModel
info: Microsoft.EntityFrameworkCore.Infrastructure[10403]
      Entity Framework Core 2.2.1-servicing-10028 initialized 'MyDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer' with options: None
Done. To undo this action, use 'ef migrations remove'
&amp;gt; dotnet ef database update
info: Microsoft.EntityFrameworkCore.Infrastructure[10403]
      Entity Framework Core 2.2.1-servicing-10028 initialized 'MyDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer' with options: None
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (322ms) [Parameters=[], CommandType='Text', CommandTimeout='60']
      CREATE DATABASE [MyDatabase];
... Some more output
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="dbinitializer"&gt;DbInitializer&lt;/h2&gt;
&lt;p&gt;The responsibility of the &lt;code&gt;DbInitializer&lt;/code&gt; class is to initialize data in the database.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public class DbInitializer
{
    public static void Initialize(MyDbContext context, IServiceProvider services)
    {
        // Get a logger
        var logger = services.GetRequiredService&amp;lt;ILogger&amp;lt;DbInitializer&amp;gt;&amp;gt;();

        // Make sure the database is created
        // We already did this in the previous step
        context.Database.EnsureCreated();

        if (context.Authors.Any())
        {
            logger.LogInformation(&amp;quot;The database was already seeded&amp;quot;);
            return;
        }

        logger.LogInformation(&amp;quot;Start seeding the database.&amp;quot;);

        var person = new Person
        {
            FirstName = &amp;quot;Johan&amp;quot;,
            LastName = &amp;quot;Vergeer&amp;quot;,
            Age = 32
        };

        context.People.Add(person);
        context.SaveChanges();

        logger.LogInformation(&amp;quot;Finished seeding the database.&amp;quot;);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I think this is pretty self explanatory, but I'll add some explanation. The static &lt;code&gt;Initialize()&lt;/code&gt; method takes a &lt;code&gt;MyDbContext&lt;/code&gt; and an &lt;code&gt;IServiceProvider&lt;/code&gt; instance as input parameters. We'll see in the next step how these are passed in. Especially in these setup methods I prefer to log too much over too little. They won't be called more then once in the lifetime of the application, so they won't clutter your log very much, and it gives us some insights that have proven to be very useful to me.&lt;/p&gt;
&lt;p&gt;We just create one &lt;code&gt;Person&lt;/code&gt; object, which is added to &lt;code&gt;MyDbContext&lt;/code&gt;, after which &lt;code&gt;MyDbContext&lt;/code&gt; saves the &lt;code&gt;Person&lt;/code&gt; to the database.&lt;/p&gt;
&lt;h2 id="use-dbinitializer"&gt;Use DbInitializer&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;DbInitializer&lt;/code&gt; should run after the application has started, and before the user starts using it. Because we also want to be able to seed a database with other data while testing, the database can't be initialized in &lt;code&gt;Startup&lt;/code&gt;. Therefore we put the initialization in the &lt;code&gt;Program&lt;/code&gt; class, right after the host is built.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public class Program
{
    public static void Main(string[] args)
    {
        var host = CreateWebHostBuilder(args).Build();

        SeedDatabase(host);

        host.Run();
    }

    public static IWebHostBuilder CreateWebHostBuilder(string[] args) =&amp;gt;
        WebHost.CreateDefaultBuilder(args)
            .UseStartup&amp;lt;Startup&amp;gt;();

    private static void SeedDatabase(IWebHost host)
    {
        using (var scope = host.Services.CreateScope())
        {
            var services = scope.ServiceProvider;
            try
            {
                var context = services.GetRequiredService&amp;lt;MyDbContext&amp;gt;();

                DbInitializer.Initialize(context, services);
            }
            catch (Exception ex)
            {
                var logger = services.GetRequiredService&amp;lt;ILogger&amp;lt;Program&amp;gt;&amp;gt;();
                logger.LogError(&amp;quot;An error occurred while seeding the database&amp;quot;);
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see, we can get &lt;code&gt;MyDbContext&lt;/code&gt; from the services collection because we already ran &lt;code&gt;Startup&lt;/code&gt;.
Here we pass the &lt;code&gt;context&lt;/code&gt; and the &lt;code&gt;IServiceProvider&lt;/code&gt; instance, &lt;code&gt;services&lt;/code&gt;, to the &lt;code&gt;Initialize()&lt;/code&gt; method of &lt;code&gt;DbInitializer&lt;/code&gt;, where
&lt;code&gt;context&lt;/code&gt; is used to add and save the &lt;code&gt;Person&lt;/code&gt; instance to the database, and &lt;code&gt;services&lt;/code&gt; is used to get the &lt;code&gt;ILogger&lt;/code&gt; instance.&lt;/p&gt;
&lt;h1 id="run-the-application"&gt;Run the application&lt;/h1&gt;
&lt;p&gt;Now when we run the application for the first time, the data is seeded to the database.&lt;/p&gt;
</content:encoded>
		</item>
		<item>
			<title>ASP.NET Core integration tests</title>
			<link>http://fanioz.github.io/posts/asp-net-core-integration-tests</link>
			<description>&lt;p&gt;Integration tests ensure that an app's components function correctly at a level that includes the app's supporting infrastructure, such as the database, file system, and network. ASP.NET Core supports integration tests using a unit test framework with a test web host and an in-memory test server.&lt;a id="fnref:1" href="#fn:1" class="footnote-ref"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;</description>
			<author>Johan Vergeer</author>
			<guid>http://fanioz.github.io/posts/asp-net-core-integration-tests</guid>
			<pubDate>Sun, 31 Mar 2019 00:00:00 GMT</pubDate>
			<content:encoded>&lt;blockquote class="blockquote"&gt;
&lt;p&gt;Integration tests ensure that an app's components function correctly at a level that includes the app's supporting infrastructure, such as the database, file system, and network. ASP.NET Core supports integration tests using a unit test framework with a test web host and an in-memory test server.&lt;a id="fnref:1" href="#fn:1" class="footnote-ref"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id="testserver"&gt;TestServer&lt;/h1&gt;
&lt;blockquote class="blockquote"&gt;
&lt;p&gt;Infrastructure components, such as the test web host and in-memory test server (&lt;code&gt;TestServer&lt;/code&gt;), are provided or managed by the &lt;code&gt;Microsoft.AspNetCore.Mvc.Testing&lt;/code&gt; package. Use of this package streamlines test creation and execution.&lt;a id="fnref:2" href="#fn:1" class="footnote-ref"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As it was said before, the &lt;code&gt;TestServer&lt;/code&gt; class is used to create an in-memory test server we can use to perform requests. In order to get as close a possible to the real server, we can use the &lt;code&gt;StartUp&lt;/code&gt; class from the ASP.NET Core project.&lt;/p&gt;
&lt;h2 id="integration-test-using-testserver"&gt;Integration test using TestServer&lt;/h2&gt;
&lt;p&gt;Using the TDD way of life 😉, we write the test first. To use &lt;code&gt;TestServer&lt;/code&gt;, you first need to import &lt;code&gt;Microsoft.AspNetCore.Mvc.Testing&lt;/code&gt; into your project.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public class SimpleTestServerIntegrationTest
{
    public HttpClient _client;

    public SimpleTestServerIntegrationTest()
    {
        var server = new TestServer(new WebHostBuilder().UseStartup&amp;lt;Startup&amp;gt;());
        _client = server.CreateClient();
    }

    [Fact]
    public async Task Description_NoCondition_Success()
    {
        var response = await _client.GetAsync(&amp;quot;/Hello/World&amp;quot;);
        response.EnsureSuccessStatusCode();

        var responseString = await response.Content.ReadAsStringAsync();

        Assert.Equal(&amp;quot;Hello, World!&amp;quot;, responseString);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see, we use the &lt;code&gt;StartUp&lt;/code&gt; class from our main project. This is the same &lt;code&gt;Startup&lt;/code&gt; class that is used in &lt;code&gt;Program.cs&lt;/code&gt;. This way our tests uses the same configuration as our live server.&lt;/p&gt;
&lt;p&gt;Next we get a client from the created server we can use to make a request.&lt;/p&gt;
&lt;p&gt;Now that we have our failing test, it is time to write some code to make the test pass.&lt;/p&gt;
&lt;h2 id="controller-implementation"&gt;Controller implementation&lt;/h2&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public class HelloController : Controller
{
    public IActionResult Index()
    {
        return View();
    }

    public string World()
    {
        return &amp;quot;Hello, World!&amp;quot;;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;By convention, ASP.NET core will use the controller name and the method name to build the URL. &lt;a id="fnref:3" href="#fn:2" class="footnote-ref"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; So this controller should be accessible with a URL &lt;code&gt;http://localhost/Hello/World&lt;/code&gt; (Assuming your website is running on localhost). This is the path we set before in our integration test.&lt;/p&gt;
&lt;h2 id="running-the-test"&gt;Running the test&lt;/h2&gt;
&lt;p&gt;When we fire up the test, it will run the &lt;code&gt;TestServer&lt;/code&gt; using the configuration from &lt;code&gt;Startup&lt;/code&gt;, create a client and send a request.
When all is working as expected, your test should pass and you can move on to the next part of your application.&lt;/p&gt;
&lt;div class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;&lt;a href="https://docs.microsoft.com/en-us/aspnet/core/test/integration-tests?view=aspnetcore-2.2"&gt;https://docs.microsoft.com/en-us/aspnet/core/test/integration-tests?view=aspnetcore-2.2&lt;/a&gt;&lt;a href="#fnref:1" class="footnote-back-ref"&gt;&amp;#8617;&lt;/a&gt;&lt;a href="#fnref:2" class="footnote-back-ref"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;&lt;a href="https://docs.microsoft.com/en-us/aspnet/core/mvc/controllers/routing?view=aspnetcore-2.2"&gt;https://docs.microsoft.com/en-us/aspnet/core/mvc/controllers/routing?view=aspnetcore-2.2&lt;/a&gt;&lt;a href="#fnref:3" class="footnote-back-ref"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content:encoded>
		</item>
		<item>
			<title>Exception handling in UML Sequence Diagram</title>
			<link>http://fanioz.github.io/posts/uml-sequence-diagram-exception-handling</link>
			<description>&lt;p&gt;UML provides neither notation to model exception handling in sequence diagrams nor any reasoning why it is absent. Some clumsy approaches to model try-catch blocks are by utilizing &lt;strong&gt;combined fragments - alt&lt;/strong&gt; (alternatives) and &lt;strong&gt;breaks&lt;/strong&gt;, while adding stereotypes for &lt;strong&gt;reply messages&lt;/strong&gt; representing thrown exceptions. There are several proposed notations for exception handling. &lt;a id="fnref:1" href="#fn:1" class="footnote-ref"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;</description>
			<author>Johan Vergeer</author>
			<guid>http://fanioz.github.io/posts/uml-sequence-diagram-exception-handling</guid>
			<pubDate>Sun, 24 Mar 2019 00:00:00 GMT</pubDate>
			<content:encoded>&lt;blockquote class="blockquote"&gt;
&lt;p&gt;UML provides neither notation to model exception handling in sequence diagrams nor any reasoning why it is absent. Some clumsy approaches to model try-catch blocks are by utilizing &lt;strong&gt;combined fragments - alt&lt;/strong&gt; (alternatives) and &lt;strong&gt;breaks&lt;/strong&gt;, while adding stereotypes for &lt;strong&gt;reply messages&lt;/strong&gt; representing thrown exceptions. There are several proposed notations for exception handling. &lt;a id="fnref:1" href="#fn:1" class="footnote-ref"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;After searching for quite a while on how to model exception handling in a UML Sequence Diagram I found two ways to represent exception handling in a UML Sequence Diagram. They both use interaction operators, &lt;strong&gt;alt&lt;/strong&gt; and &lt;strong&gt;break&lt;/strong&gt;.&lt;/p&gt;
&lt;h1 id="atm-example"&gt;ATM example&lt;/h1&gt;
&lt;p&gt;I'll describe both methods using a classical example: withdraw money from an ATM when the balance is too low.&lt;/p&gt;
&lt;h2 id="happy-flow"&gt;Happy flow&lt;/h2&gt;
&lt;p&gt;Let's start with the happy flow. The customer enters the data, the ATM calls a service, which calls the bank's server. The server confirms the withdrawal is approved and, the service passes this on to the ATM's UI and the ATM dispenses the money.&lt;/p&gt;
&lt;p&gt;&lt;img src="img/sequence-diagram-exception-handling-happy-flow.jpg" class="img-fluid" alt="Happy flow sequence diagram" /&gt;&lt;/p&gt;
&lt;h2 id="alt"&gt;Alt&lt;/h2&gt;
&lt;blockquote class="blockquote"&gt;
&lt;p&gt;An alternative interaction operator represents the logic equivalent of an if-then-else statement. Only one of the offered alternatives runs on any pass through the interaction. However, as for any operand, the selected operand in the alternative structure runs only if the guard condition tests true. If there is no guard, the operand always runs when it is selected. The else clause of the alternative combined fragment runs when no other option is selected. &lt;a id="fnref:2" href="#fn:2" class="footnote-ref"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Let's take a look when the situation when something happens, what causes the ATM to decline de withdrawal. Using an &lt;strong&gt;alt&lt;/strong&gt; interaction operator, it would look something like this:&lt;/p&gt;
&lt;p&gt;&lt;img src="img/sequence-diagram-exception-handling-alt.jpg" class="img-fluid" alt="Alt interaction operator sequence diagram" /&gt;&lt;/p&gt;
&lt;p&gt;This looks nice, for a small diagram, but once the diagram starts to grow and you get a lot of nested &lt;strong&gt;alt&lt;/strong&gt; interaction operations, you might start to loose the overview.&lt;/p&gt;
&lt;h2 id="break"&gt;Break&lt;/h2&gt;
&lt;blockquote class="blockquote"&gt;
&lt;p&gt;The break interaction operator is similar to the break mechanism in other programming languages. When the guard condition is true , the current interaction run is abandoned and the clause in the break interaction operand runs. &lt;a id="fnref:3" href="#fn:2" class="footnote-ref"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Let's take a look when the situation when something happens, what causes the ATM to decline de withdrawal. Using a &lt;strong&gt;break&lt;/strong&gt; interaction operator, it would look something like this:&lt;/p&gt;
&lt;p&gt;&lt;img src="img/sequence-diagram-exception-handling-break.jpg" class="img-fluid" alt="Break interaction operator sequence diagram" /&gt;&lt;/p&gt;
&lt;p&gt;In this example the exception isn't caught until it enters the UI, in this case the ATM. What I like about this way of displaying exception handling is that it makes the diagram much less cluttered. I think it even makes things better, because you can see where a sequence stops when an exception occurs. This is ofcourse a very simple example, and you can have a lot more interaction in the &lt;strong&gt;break&lt;/strong&gt; interaction operator, like logging or transaction handling.&lt;/p&gt;
&lt;h1 id="conclusion"&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;As always, the best method depends on the scenario. But for &amp;quot;simple&amp;quot; exception handling, I think a &lt;strong&gt;break&lt;/strong&gt; is a better way to represent it, then &lt;strong&gt;alt&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;&lt;a href="https://www.uml-diagrams.org/sequence-diagrams-questions-answers.html"&gt;https://www.uml-diagrams.org/sequence-diagrams-questions-answers.html&lt;/a&gt;&lt;a href="#fnref:1" class="footnote-back-ref"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;&lt;a href="https://www.ibm.com/support/knowledgecenter/SSRTLW_8.5.5/com.ibm.xtools.sequence.doc/topics/rinteracoperate.html"&gt;https://www.ibm.com/support/knowledgecenter/SSRTLW_8.5.5/com.ibm.xtools.sequence.doc/topics/rinteracoperate.html&lt;/a&gt;&lt;a href="#fnref:2" class="footnote-back-ref"&gt;&amp;#8617;&lt;/a&gt;&lt;a href="#fnref:3" class="footnote-back-ref"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content:encoded>
		</item>
		<item>
			<title>VS Code Settings</title>
			<link>http://fanioz.github.io/posts/vs-code-settings</link>
			<description>&lt;p&gt;VS Code is very configurable. In this post I'll share the configuration I like to use.&lt;/p&gt;</description>
			<author>Johan Vergeer</author>
			<guid>http://fanioz.github.io/posts/vs-code-settings</guid>
			<pubDate>Sun, 24 Mar 2019 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;VS Code is very configurable. In this post I'll share the configuration I like to use.&lt;/p&gt;
&lt;h1 id="auto-save"&gt;Auto save&lt;/h1&gt;
&lt;p&gt;Most of the time I like my IDE to save files automatically instead of having to save each and every file independently. I know, I can save all files, but that's still more work that letting the IDE do it.&lt;/p&gt;
&lt;p&gt;To configure this, just add the following to the main object in &lt;code&gt;settings.json&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-json"&gt;&amp;quot;files.autoSave&amp;quot;: &amp;quot;afterDelay&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id="associate-language-with-file-extensions"&gt;Associate language with file extensions&lt;/h1&gt;
&lt;p&gt;As you can read in the &lt;a href="https://code.visualstudio.com/docs/languages/overview#_adding-a-file-extension-to-a-language"&gt;VS Code documentation&lt;/a&gt;, you can set a language for each file extension.&lt;/p&gt;
&lt;p&gt;In my example, I would like to add the &lt;code&gt;.wyam&lt;/code&gt; file extension to &lt;code&gt;C#&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-json"&gt;&amp;quot;files.associations&amp;quot;: {
    &amp;quot;*.wyam&amp;quot;: &amp;quot;csharp&amp;quot;
},
&lt;/code&gt;&lt;/pre&gt;
</content:encoded>
		</item>
		<item>
			<title>VS Code Extensions</title>
			<link>http://fanioz.github.io/posts/vs-code-extensions</link>
			<description>&lt;p&gt;One of the many great things about VS Code is it's extensibility, and the many extensions that are out there in the marketplace. This is a list of extensions I use and wanted to share with you.&lt;/p&gt;</description>
			<author>Johan Vergeer</author>
			<guid>http://fanioz.github.io/posts/vs-code-extensions</guid>
			<pubDate>Sun, 24 Mar 2019 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;One of the many great things about VS Code is it's extensibility, and the many extensions that are out there in the marketplace. This is a list of extensions I use and wanted to share with you.&lt;/p&gt;
&lt;p&gt;Since all extensions provide pretty to very good documentation, I won't go into too much detail about them.&lt;/p&gt;
&lt;h1 id="html-and-css"&gt;HTML and CSS&lt;/h1&gt;
&lt;h2 id="emmet"&gt;Emmet&lt;/h2&gt;
&lt;p&gt;Emmit is already pre installed on VS Code, and it helps you to create HTML and CSS really quickly.&lt;/p&gt;
&lt;h2 id="live-server"&gt;Live Server&lt;/h2&gt;
&lt;p&gt;Makes developing pure HTML and CSS websites a lot easier.&lt;/p&gt;
&lt;h2 id="css-peek"&gt;CSS Peek&lt;/h2&gt;
&lt;p&gt;Allows you to see &lt;strong&gt;and edit&lt;/strong&gt; CSS from a mini window from your HTML.&lt;/p&gt;
&lt;p&gt;After installing, when you hit &lt;code&gt;F12&lt;/code&gt;, it opens a mini window that allows you to edit the CSS right away without leaving the HTML. Hit &lt;code&gt;Esc&lt;/code&gt; to get out of it.&lt;/p&gt;
&lt;h1 id="themes"&gt;Themes&lt;/h1&gt;
&lt;h2 id="material-theme"&gt;Material Theme&lt;/h2&gt;
&lt;p&gt;One of the most popular themes for VS Code. Just search for &lt;code&gt;Material Theme&lt;/code&gt; in the extensions Marketplace. It comes with several different looks.&lt;/p&gt;
&lt;p&gt;To change the theme you can use &lt;code&gt;Ctrl+k+t&lt;/code&gt;.&lt;/p&gt;
&lt;h1 id="code-highlighting-and-formatting"&gt;Code Highlighting and formatting&lt;/h1&gt;
&lt;h2 id="color-highlight"&gt;Color Highlight&lt;/h2&gt;
&lt;p&gt;This plugin highlights RGB or Hex colors right in the editor. You can change the marker type in settings → Color highlight.&lt;/p&gt;
&lt;h2 id="bracket-pair-colorizer-2"&gt;Bracket pair colorizer 2&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Bracket pair colorizer 2&lt;/em&gt; is the successor of the very popular &lt;em&gt;Bracket pair colorizer&lt;/em&gt; extension.&lt;/p&gt;
&lt;p&gt;It colorizes the brackets in programming languages so you can see matching brackets better. In &lt;code&gt;settings.json&lt;/code&gt; you can set the colors to be used for each level.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-json"&gt;    &amp;quot;bracket-pair-colorizer-2.colors&amp;quot;: [
        &amp;quot;#00BCD4&amp;quot;,
        &amp;quot;#CDDC39&amp;quot;,
        &amp;quot;#EC407A&amp;quot;,
        &amp;quot;#9C27B0&amp;quot;
    ]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can changes these colors to your liking.&lt;/p&gt;
&lt;h2 id="prettier-code-formatter"&gt;Prettier - Code Formatter&lt;/h2&gt;
&lt;p&gt;There are a couple of extensions that will make your code prettier. The most popular is &lt;strong&gt;Prettier - Code Formatter&lt;/strong&gt;. It does exactly what it says, it makes your code prettier.&lt;/p&gt;
&lt;h1 id="snippets"&gt;Snippets&lt;/h1&gt;
&lt;p&gt;There are several extensions that use can use to create snippets. I don't use them very often, but to some people they can be very useful.
Just search for a snippet library for your language and install it.&lt;/p&gt;
&lt;h1 id="git"&gt;Git&lt;/h1&gt;
&lt;h2 id="git-project-manager"&gt;Git Project Manager&lt;/h2&gt;
&lt;p&gt;Allows you to change easily between git projects.&lt;/p&gt;
&lt;h2 id="gitlens"&gt;GitLens&lt;/h2&gt;
&lt;p&gt;GitLens supercharges the Git capabilities built into Visual Studio Code. It helps you to visualize code authorship at a glance via Git blame annotations and code lens, seamlessly navigate and explore Git repositories, gain valuable insights via powerful comparison commands, and so much more.&lt;/p&gt;
&lt;h2 id="git-graph"&gt;Git Graph&lt;/h2&gt;
&lt;p&gt;View a Git Graph of your repository, and perform Git actions from the graph.&lt;/p&gt;
&lt;h1 id="docfx"&gt;DocFX&lt;/h1&gt;
&lt;h2 id="docfx-assistant"&gt;DocFX Assistant&lt;/h2&gt;
&lt;p&gt;An extension for VS Code that provides tools for authoring content using Microsoft DocFX.&lt;/p&gt;
&lt;h1 id="markdown"&gt;Markdown&lt;/h1&gt;
&lt;h2 id="markdown-all-in-one"&gt;Markdown All in One&lt;/h2&gt;
&lt;p&gt;All you need for Markdown (keyboard shortcuts, table of contents, auto preview and more).&lt;/p&gt;
&lt;h2 id="markdown-table-formatter"&gt;Markdown Table Formatter&lt;/h2&gt;
&lt;p&gt;A simple markdown plugin to format tables.&lt;/p&gt;
&lt;h1 id="yaml"&gt;YAML&lt;/h1&gt;
&lt;p&gt;YAML Language Support by Red Hat, with built-in Kubernetes and Kedge syntax support&lt;/p&gt;
&lt;h1 id="xml"&gt;XML&lt;/h1&gt;
&lt;p&gt;XML Language Support by Red Hat&lt;/p&gt;
&lt;h1 id="powershell"&gt;PowerShell&lt;/h1&gt;
&lt;p&gt;Develop PowerShell scripts in Visual Studio Code!&lt;/p&gt;
</content:encoded>
		</item>
		<item>
			<title>Useful links</title>
			<link>http://fanioz.github.io/posts/useful-links</link>
			<description>&lt;p&gt;This page contains some useful links that I personally use.&lt;/p&gt;</description>
			<author>Johan Vergeer</author>
			<guid>http://fanioz.github.io/posts/useful-links</guid>
			<pubDate>Sun, 17 Mar 2019 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;This page contains some useful links that I personally use.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://live.asp.net/"&gt;ASP.NET Community Standup&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content:encoded>
		</item>
		<item>
			<title>Wyam, Azure DevOps and GitHub Pages</title>
			<link>http://fanioz.github.io/posts/wyam-azure-devops</link>
			<description>&lt;p&gt;Publishing a static site with a static content generator can be fully automated. In this case I'm using &lt;a href="https://wyam.io/"&gt;Wyam&lt;/a&gt;, a static site generator, &lt;a href="https://pages.github.com/"&gt;GitHub Pages&lt;/a&gt; for hosting and &lt;a href="https://azure.microsoft.com/en-us/solutions/devops/"&gt;Azure DevOps&lt;/a&gt; for build and deployment. Of course there are a ton of other ways to do this, but right now I'll show you the way that I chose to use.&lt;/p&gt;</description>
			<author>Johan Vergeer</author>
			<guid>http://fanioz.github.io/posts/wyam-azure-devops</guid>
			<pubDate>Sat, 16 Mar 2019 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;Publishing a static site with a static content generator can be fully automated. In this case I'm using &lt;a href="https://wyam.io/"&gt;Wyam&lt;/a&gt;, a static site generator, &lt;a href="https://pages.github.com/"&gt;GitHub Pages&lt;/a&gt; for hosting and &lt;a href="https://azure.microsoft.com/en-us/solutions/devops/"&gt;Azure DevOps&lt;/a&gt; for build and deployment. Of course there are a ton of other ways to do this, but right now I'll show you the way that I chose to use.&lt;/p&gt;
&lt;p&gt;This post will mainly focus on automated build and deployment, since there are a lot of great online resources on how to setup Wyam on your local machine.&lt;/p&gt;
&lt;h1 id="github-setup"&gt;GitHub setup&lt;/h1&gt;
&lt;p&gt;As I said, I'm using GitHub Pages to host my site. You can use it for free for any static website. By default GitHub Pages supports &lt;a href="https://jekyllrb.com/"&gt;Jelyll&lt;/a&gt; with some out of the box themes and plugins. I used Jekyll in the past, but I found Wyam easier to work with.&lt;/p&gt;
&lt;p&gt;To create a personal blog on GitHub Pages, you should create a Git repository named &lt;code&gt;yourusername.github.io&lt;/code&gt;. When you do this, GitHub will automatically create the site for you, and use the &lt;code&gt;master&lt;/code&gt; branch for the site content. So once you created the repository, don't use the master branch, but create a new branch that will contain your working files. I named my working branch &lt;code&gt;source&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Perform the following commands after you created the repository on GitHub to setup the branches.&lt;/p&gt;
&lt;?# Tip ?&gt;
&lt;p&gt;Make sure you &lt;strong&gt;don't&lt;/strong&gt; include README and .gitignore when creating the repository on GitHub&lt;/p&gt;
&lt;?#/ Tip ?&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;git clone git&amp;#64;github.com:yourusername/yourusername.github.io.git
cd yourusername.github.io
git branch source
git checkout source
git push -u origin source
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;These command will clone the repository from GitHub, create a new branch named &lt;code&gt;source&lt;/code&gt;, push the new branch to GitHub and makes &lt;code&gt;source&lt;/code&gt; the default branch. You can check whether you are on the source branch with this command:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;PS &amp;gt; git status
On branch source
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="gitignore"&gt;.gitignore&lt;/h2&gt;
&lt;p&gt;In the next steps we'll start creating the site. In this process some files will be created that we don't want in our Git repository. To automate this you can create a file named &lt;code&gt;.gitignore&lt;/code&gt; in your project root and add these contents:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-plaintext"&gt;output
config.wyam.*
tools
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id="setup-wyam"&gt;Setup Wyam&lt;/h1&gt;
&lt;p&gt;First install Wyam if you haven't already done this. You can find how to install Wyam in the &lt;a href="https://wyam.io/docs/usage/obtaining"&gt;Wyam Documentation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Now move into your working directory (&lt;code&gt;yourusername.github.io&lt;/code&gt;) and create a new Wyam project. In this case I'll demonstrate how to create a blog since I think this is the most common use case.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;PS &amp;gt; wyam new -r blog
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will scaffold a new Wyam site with the blog recipe. More about Wyam recipes can be found &lt;a href="https://wyam.io/recipes/"&gt;here&lt;/a&gt;. Since this post is mostly about automated build and deployment, I won't go into any further detail on setting up a Wyam site.&lt;/p&gt;
&lt;p&gt;You can preview the site with:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;PS &amp;gt; wyam --preview --watch
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will not only start up a lightweight server, but it will also keep track of your changes and automatically update them. This way you can keep your site running while writing and see the changes in real time.&lt;/p&gt;
&lt;p&gt;You can build a site with:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;PS &amp;gt; wyam build
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will build the site. The site contents are located in the &lt;code&gt;output&lt;/code&gt; directory.&lt;/p&gt;
&lt;?# Note ?&gt;
&lt;p&gt;Since the &lt;code&gt;output&lt;/code&gt; directory is in the &lt;code&gt;.gitignore&lt;/code&gt; file, it won't be committed to your git repository.
This is intentionally. We'll build the output directory fully automated on Azure DevOps later on.&lt;/p&gt;
&lt;?#/ Note ?&gt;
&lt;p&gt;Now that you've seen your site works it is time to deploy it.&lt;/p&gt;
&lt;h1 id="azure-devops-setup"&gt;Azure DevOps Setup&lt;/h1&gt;
&lt;p&gt;If you haven't already created an account on Azure DevOps you should do so now.
It is completely free for small projects. Once you have an account you can create a new project. I've called mine &lt;code&gt;johanvergeer.github.io&lt;/code&gt;. Creating an account and a new project is such a straight forward process I won't go into any detail on those.&lt;/p&gt;
&lt;h2 id="azure-pipelines-on-github-marketplace"&gt;Azure Pipelines on GitHub Marketplace&lt;/h2&gt;
&lt;p&gt;For the easiest integration between Azure DevOps and GitHub you should get the &lt;a href="https://github.com/marketplace/azure-pipelines"&gt;Azure Pipelines&lt;/a&gt; application on the GitHub Marketplace. Setup a plan and link your Azure DevOps project.&lt;/p&gt;
&lt;p&gt;This will create a default yaml file named &lt;code&gt;azure-pipelines.yml&lt;/code&gt;. We'll change this file later on to match our needs.&lt;/p&gt;
&lt;h2 id="cake"&gt;Cake&lt;/h2&gt;
&lt;p&gt;Before we start working on the &lt;code&gt;azure-pipelines.yml&lt;/code&gt; file, we will create a &lt;a href="https://cakebuild.net/"&gt;Cake&lt;/a&gt; build script for our site. The advantage of using this Cake build script is that it can be reused on other locations.&lt;/p&gt;
&lt;p&gt;Create a file named &lt;code&gt;build.cake&lt;/code&gt; with the following contents:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;#tool nuget:?package=Wyam&amp;amp;version=2.2.4
#tool &amp;quot;nuget:?package=GitVersion.CommandLine&amp;amp;version=4.0.0&amp;quot;
#addin nuget:?package=Cake.Wyam&amp;amp;version=2.2.4
#addin nuget:?package=Cake.Git&amp;amp;version=0.19.0

var target = Argument(&amp;quot;target&amp;quot;, &amp;quot;Default&amp;quot;);

var repositoryUrl = &amp;quot;https://github.com/username/username.github.io.git&amp;quot;;
var githubUserName = EnvironmentVariable(&amp;quot;GITHUB_USERNAME&amp;quot;);
var githubAccessToken = EnvironmentVariable(&amp;quot;GITHUB_ACCESS_TOKEN&amp;quot;);

var gitVersion = GitVersion();

var tempDir =  GetTempDirectory();

public string GetTempDirectory() {
    string path = System.IO.Path.GetRandomFileName();
    return System.IO.Directory.CreateDirectory(System.IO.Path.Combine(System.IO.Path.GetTempPath(), path)).FullName;
}

Task(&amp;quot;Default&amp;quot;)
    .Does(() =&amp;gt; {
    });

Task(&amp;quot;Build&amp;quot;)
    .Does(() =&amp;gt;
    {
        Wyam();
    });

Task(&amp;quot;Preview&amp;quot;)
    .Does(() =&amp;gt;
    {
        Wyam(new WyamSettings
        {
            Preview = true,
            Watch = true
        });
    });

Task(&amp;quot;Deploy&amp;quot;)
    .IsDependentOn(&amp;quot;PushMasterBranch&amp;quot;);

Task(&amp;quot;CloneMasterBranch&amp;quot;)
    .Does(() =&amp;gt; {
        Information(&amp;quot;Cloning master branch into temp directory&amp;quot;);

        GitClone(
            repositoryUrl,
            new DirectoryPath(tempDir),
            githubUserName,
            githubAccessToken,
            new GitCloneSettings {
                BranchName = &amp;quot;master&amp;quot;
            }
        );
    });

Task(&amp;quot;EmptyMasterBranch&amp;quot;)
    .IsDependentOn(&amp;quot;CloneMasterBranch&amp;quot;)
    .Does(() =&amp;gt; {
        Information(&amp;quot;Emptying master branch&amp;quot;);

        string[] filePaths = System.IO.Directory.GetFiles(tempDir);

        foreach (string filePath in filePaths)
        {
            var fileName = new FileInfo(filePath).Name;
            fileName = fileName.ToLower();

            if(System.IO.File.Exists(filePath))
            {
                DeleteFile(filePath);
            }
        }

        string[] directoryPaths = System.IO.Directory.GetDirectories(tempDir);

        foreach (string directoryPath in directoryPaths)
        {
            var directoryName = new FileInfo(directoryPath).Name;
            directoryName = directoryName.ToLower();

            if(directoryName == &amp;quot;.git&amp;quot;)
            {
                // Do not delete the .git directory
                continue;
            }

            if (System.IO.Directory.Exists(directoryPath))
            {
                DeleteDirectory(
                    directoryPath,
                    new DeleteDirectorySettings{
                        Recursive = true,
                        Force = true
                });
            }
        }
    });

Task(&amp;quot;CopyToMasterBranch&amp;quot;)
    .IsDependentOn(&amp;quot;Build&amp;quot;)
    .IsDependentOn(&amp;quot;EmptyMasterBranch&amp;quot;)
    .Does(() =&amp;gt; {
        var sourcePath = &amp;quot;./output&amp;quot;;

        Information(&amp;quot;Copying files to master branch&amp;quot;);

        // Now Create all of the directories
        foreach (string dirPath in System.IO.Directory.GetDirectories(sourcePath, &amp;quot;*&amp;quot;, SearchOption.AllDirectories))
        {
            System.IO.Directory.CreateDirectory(dirPath.Replace(sourcePath, tempDir));
        } 

        //Copy all the files &amp;amp; Replaces any files with the same name
        foreach (string newPath in System.IO.Directory.GetFiles(sourcePath, &amp;quot;*.*&amp;quot;, SearchOption.AllDirectories))
            System.IO.File.Copy(newPath, newPath.Replace(sourcePath, tempDir), true);
    });

Task(&amp;quot;CommitMasterBranch&amp;quot;)
    .IsDependentOn(&amp;quot;CopyToMasterBranch&amp;quot;)
    .Does(() =&amp;gt; {
        Information(&amp;quot;Performing Git commit on master branch&amp;quot;);

        GitAddAll(tempDir);
        GitCommit(tempDir, &amp;quot;username&amp;quot;, &amp;quot;username&amp;#64;email.com&amp;quot;, $&amp;quot;Automated release {gitVersion.InformationalVersion}&amp;quot;);
    });

Task(&amp;quot;PushMasterBranch&amp;quot;)
    .IsDependentOn(&amp;quot;CommitMasterBranch&amp;quot;)
    .Does(() =&amp;gt; {
        Information(&amp;quot;Pushing master branch to origin&amp;quot;);

        GitPush(tempDir, githubUserName, githubAccessToken, &amp;quot;master&amp;quot;);
    });

RunTarget(target)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now you should &lt;a href="https://cakebuild.net/docs/tutorials/setting-up-a-new-project#install-the-bootstrapper"&gt;install the bootstrapper&lt;/a&gt; by running the following in PowerShell.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;PS &amp;gt; Invoke-WebRequest https://cakebuild.net/download/bootstrapper/windows -OutFile build.ps1
&lt;/code&gt;&lt;/pre&gt;
&lt;?# Note ?&gt;
&lt;p&gt;Before doing a build, you should create 2 environment variables: &lt;code&gt;GITHUB_USERNAME&lt;/code&gt; and &lt;code&gt;GITHUB_ACCESS_TOKEN&lt;/code&gt;.&lt;/p&gt;
&lt;?#/ Note ?&gt;
&lt;?# Warning ?&gt;
&lt;p&gt;Be aware that the &lt;code&gt;GITHUB_ACCESS_TOKEN&lt;/code&gt; is visible to anyone that has access to your environment variables.&lt;/p&gt;
&lt;?#/ Warning ?&gt;
&lt;p&gt;Once you created the build file and installed the bootstrapper you can build, preview and deploy.&lt;/p&gt;
&lt;p&gt;To do a build:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;PS &amp;gt; .\build.ps1 -Target Build
Preparing to run build script...
Running build script...

========================================
Build
=======================================
...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And to preview:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;PS &amp;gt; .\build.ps1 -target Preview
Preparing to run build script...
Running build script...

========================================
Preview
========================================
...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And to deploy:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;PS &amp;gt; .\build.ps1 -target Deploy
Preparing to run build script...
Running build script...
...
========================================
Deploy
========================================
...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This last command should have deployed your Wyam site to GitHub Pages, so it's time to check whether it worked.&lt;/p&gt;
&lt;?# Warning ?&gt;
&lt;p&gt;We'll use this Cake script to build the site on Azure DevOps, so make sure it works before you continue.&lt;/p&gt;
&lt;?#/ Warning ?&gt;
&lt;p&gt;The beauty of this way of creating a build script is that once it works on your machine, it will also work on any other device or CI server.&lt;/p&gt;
&lt;h2 id="azure-pipelines.yml"&gt;azure-pipelines.yml&lt;/h2&gt;
&lt;p&gt;Now it's time to start creating our &lt;code&gt;azure-pipelines.yml&lt;/code&gt; file so we can build our site on Azure DevOps. This is where the part comes in that might seem hard at first, but is very easy once you get the hang of it, so bear with me. I'll be going trough the &lt;code&gt;azure-pipelines.yml&lt;/code&gt; file step by step and I'll show you the full file at the end.&lt;/p&gt;
&lt;h3 id="agent"&gt;Agent&lt;/h3&gt;
&lt;p&gt;In the first part of our file we'll define the &lt;a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/agents/hosted?view=azure-devops&amp;amp;tabs=yaml"&gt;Agent&lt;/a&gt; that will be used. All possible agents are listed on the &lt;a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/agents/hosted?view=azure-devops&amp;amp;tabs=yaml#use-a-microsoft-hosted-agent"&gt;Microsoft website&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-yaml"&gt;pool:
  vmImage: vs2017-win2016
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="triggers"&gt;Triggers&lt;/h3&gt;
&lt;p&gt;Next we're going to describe when a build pipeline should be triggered. If you're interested you can read more about &lt;a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/build/triggers?tabs=yaml&amp;amp;view=azure-devops#continuous-integration-ci"&gt;Build Pipeline Triggers&lt;/a&gt; on the Microsoft website. For now we'll keep it fairly simple.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-yaml"&gt;trigger:
  branches:
    include:
      - source
    exclude:
      - master
  paths:
    exclude:
      - .gitignore
      - README.md
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the snippet above we described that all changes in the &lt;code&gt;source&lt;/code&gt; branch should trigger a build, except when only the &lt;code&gt;.gitignore&lt;/code&gt; or &lt;code&gt;README.md&lt;/code&gt; are changed.&lt;/p&gt;
&lt;h3 id="steps"&gt;Steps&lt;/h3&gt;
&lt;p&gt;In this build pipeline we're going to define two steps. In the first step the site will be built using the Cake script. In the second step the output files will be deployed to GitHub Pages.&lt;/p&gt;
&lt;h4 id="deploy-the-site"&gt;Deploy the site&lt;/h4&gt;
&lt;p&gt;In this first and only step we'll build and deploy the site, using the &lt;a href="https://marketplace.visualstudio.com/items?itemName=cake-build.cake"&gt;Cake plugin&lt;/a&gt;. Install this plugin and add the following snippet to &lt;code&gt;azure-pipelines.yml&lt;/code&gt; as a child of &lt;code&gt;steps:&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-yaml"&gt;steps:
  - task: cake-build.cake.cake-build-task.Cake&amp;#64;0
    displayName: &amp;quot;Build and publish Wyam site&amp;quot;
    inputs:
      target: Deploy
    env:
      GITHUB_ACCESS_TOKEN: $(githubAccessToken)
      GITHUB_USERNAME: &amp;quot;githubusername&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the script we set the &lt;code&gt;target&lt;/code&gt; parameter to &lt;code&gt;Deploy&lt;/code&gt;, which is equivalent to running &lt;code&gt;.\build.ps1 -target Deploy&lt;/code&gt; on the command line. Furthermore we make the environment variable &lt;code&gt;GITHUB_ACCESS_TOKEN&lt;/code&gt; reference the &lt;code&gt;githubAccessToken&lt;/code&gt; secret variable we'll set in the next step. The &lt;code&gt;GITHUB_USERNAME&lt;/code&gt; can be set to a static value, or you can use a variable on &lt;em&gt;Azure DevOps&lt;/em&gt;.&lt;/p&gt;
&lt;h5 id="github-access-token"&gt;GitHub Access Token&lt;/h5&gt;
&lt;p&gt;Next to the variables we defined before, this script also contains a secret, &lt;code&gt;$(githubAccessToken)&lt;/code&gt;. The GitHub access token can be created in &lt;code&gt;GitHub settings --&amp;gt; Developer Settings --&amp;gt; Personal Access Tokens&lt;/code&gt;. Click &lt;em&gt;Generate new token&lt;/em&gt;, enter a &lt;em&gt;Token description&lt;/em&gt; and select only the &lt;em&gt;repo&lt;/em&gt; scope. Click &lt;em&gt;Generate token&lt;/em&gt; and copy this token to a safe location.&lt;/p&gt;
&lt;p&gt;This GitHub access token has to be added as a variable in Azure DevOps. Go to the pipeline and click &lt;em&gt;Edit&lt;/em&gt;. The variables might be hard to find for the untrained eye. Right of the &lt;em&gt;Run&lt;/em&gt; button, click the three dots and click &lt;em&gt;Variables&lt;/em&gt;. Click &lt;em&gt;+ Add&lt;/em&gt;. Name should be &lt;code&gt;githubAccessToken&lt;/code&gt; and the value should be the access token you copied from GitHub before. Next to the value you can click a padlock icon, which will make the value a secret.&lt;/p&gt;
&lt;h3 id="the-final-file"&gt;The final file&lt;/h3&gt;
&lt;p&gt;One this I ofter miss when reading a tutorial is the full picture. So here is the full &lt;em&gt;azure-pipelines.yml&lt;/em&gt; file.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-yaml"&gt;pool:
  vmImage: vs2017-win2016

trigger:
  branches:
    include:
      - source
    exclude:
      - master
  paths:
    exclude:
      - .gitignore
      - README.md

steps:
  - task: cake-build.cake.cake-build-task.Cake&amp;#64;0
    displayName: &amp;quot;Build and publish Wyam site&amp;quot;
    inputs:
      target: Deploy
    env:
      GITHUB_ACCESS_TOKEN: $(githubAccessToken)
      GITHUB_USERNAME: &amp;quot;johanvergeer&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id="lets-deploy"&gt;Let's Deploy&lt;/h1&gt;
&lt;p&gt;Now that we're all setup, all we need to do is push to our GitHub repo, which will be picked up by Azure DevOps and a build will start.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;PS &amp;gt; git add --all
PS &amp;gt; git commit -m 'Setup azure-pipelines.yml'
PS &amp;gt; git push
&lt;/code&gt;&lt;/pre&gt;
</content:encoded>
		</item>
		<item>
			<title>Cake</title>
			<link>http://fanioz.github.io/posts/cake</link>
			<description>&lt;p&gt;This page contains some snippets and links I refer to when I'm creating Cake scripts.
Most of this information can be found on the &lt;a href="https://cakebuild.net/"&gt;Cake website&lt;/a&gt;,
but this should give a better overview of some things I personally use.&lt;/p&gt;</description>
			<author>Johan Vergeer</author>
			<guid>http://fanioz.github.io/posts/cake</guid>
			<pubDate>Fri, 15 Mar 2019 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;This page contains some snippets and links I refer to when I'm creating Cake scripts.
Most of this information can be found on the &lt;a href="https://cakebuild.net/"&gt;Cake website&lt;/a&gt;,
but this should give a better overview of some things I personally use.&lt;/p&gt;
&lt;h1 id="gitignore"&gt;.gitignore&lt;/h1&gt;
&lt;p&gt;The  &lt;code&gt;.gitignore&lt;/code&gt; file should contain the following lines:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-plaintext"&gt;tools/*
!tools/packages.config
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id="build.cake-content"&gt;build.cake content&lt;/h1&gt;
&lt;h2 id="arguments"&gt;Arguments&lt;/h2&gt;
&lt;p&gt;This defines a &lt;code&gt;-target&lt;/code&gt; argument which, when omitted, defaults to &lt;em&gt;Default&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;var target = Argument(&amp;quot;target&amp;quot;, &amp;quot;Default&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This defines a &lt;code&gt;-configuration&lt;/code&gt; argument which, when omitted, defaults to &lt;em&gt;Release&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;var configuration = Argument(&amp;quot;configuration&amp;quot;, &amp;quot;Release&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="tasks"&gt;Tasks&lt;/h2&gt;
&lt;p&gt;A Cake file contains &lt;em&gt;Tasks&lt;/em&gt; that we want to execute:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;Task(&amp;quot;Default&amp;quot;)
    .IsDependentOn(&amp;quot;Dotnet-Core-Package&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="cleandirectory-cleandirectories"&gt;CleanDirectory / CleanDirectories&lt;/h3&gt;
&lt;p&gt;These aliases make sure that the directory or directories exist, and that they are empty.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;Task(&amp;quot;Clean&amp;quot;)
    .Does(() =&amp;gt; {
        CleanDirectory(&amp;quot;./BuildArtifacts&amp;quot;);
    });
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="dotnetcorerestore"&gt;DotNetCoreRestore&lt;/h3&gt;
&lt;p&gt;In the example below is &lt;code&gt;DotNetCoreRestore&lt;/code&gt; an alias, which is running the &lt;em&gt;dotnet cli&lt;/em&gt; with the &lt;code&gt;restore&lt;/code&gt; command.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;Task(&amp;quot;Dotnet-Core-Package&amp;quot;)
    .Does(() =&amp;gt; {
        DotNetCoreRestore(
            &amp;quot;./src/project/project.csproj&amp;quot;,
            new DotNetCoreRestoreSettings {
                PackagesDirectory = &amp;quot;./src/packages&amp;quot;
            }
        );
    });
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="dotnetcorebuild"&gt;DotNetCoreBuild&lt;/h3&gt;
&lt;p&gt;In the next example the &lt;code&gt;DotNetCoreBuild&lt;/code&gt; is an alias, which is running the &lt;em&gt;dotnet cli&lt;/em&gt; with the &lt;code&gt;build&lt;/code&gt; command.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;Task(&amp;quot;Build&amp;quot;)
    .IsDependentOn(&amp;quot;Dotnet-Core-Build&amp;quot;)
    .Does(() =&amp;gt; {
        var settings = new DotNetCoreBuildSettings {
            Configuration = configuration,
            NoRestore = true
        };

        DotNetCoreBuild(&amp;quot;./src/project/project.csproj&amp;quot;);
    });
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="dotnetcorepublish"&gt;DotNetCorePublish&lt;/h3&gt;
&lt;p&gt;Publish to the local file system.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;Task(&amp;quot;Publish&amp;quot;)
    .IsDependentOn(&amp;quot;Build&amp;quot;)
    .Does(() =&amp;gt; {
        var settings = new DotNetCorePublishSettings {
            Configuration = configuration,
            OutputDirectory = &amp;quot;./BuildArtifacts&amp;quot;
        };

        DotNetCorePublish(&amp;quot;./src/project/project.csproj&amp;quot;, settings);
    });
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="aliases"&gt;Aliases&lt;/h3&gt;
&lt;p&gt;Cake supports something called &lt;a href="https://cakebuild.net/docs/fundamentals/aliases"&gt;script aliases&lt;/a&gt;. Script aliases are convenience methods that are easily accessible directly from a Cake script. Every single &lt;a href="https://cakebuild.net/dsl/"&gt;DSL method&lt;/a&gt; in Cake is implemented like an alias method.&lt;/p&gt;
&lt;h2 id="runtarget"&gt;RunTarget&lt;/h2&gt;
&lt;p&gt;The end of build.cake should contain the following line to run:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;RunTarget(target);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will make sure the &lt;code&gt;tools&lt;/code&gt; directory is not included in source control, except for &lt;code&gt;packages.config&lt;/code&gt;,
which contains the Cake version we're using.&lt;/p&gt;
&lt;h1 id="what-is-a-build"&gt;What is a build?&lt;/h1&gt;
&lt;h2 id="typical-build-workflow"&gt;Typical build workflow&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Package restore&lt;/li&gt;
&lt;li&gt;Clean&lt;/li&gt;
&lt;li&gt;Unit Tests&lt;/li&gt;
&lt;li&gt;Test Coverage (NCover, OpenCover)&lt;/li&gt;
&lt;li&gt;Static analysis
&lt;ol&gt;
&lt;li&gt;StyleCop&lt;/li&gt;
&lt;li&gt;FxCop&lt;/li&gt;
&lt;li&gt;DupFinder&lt;/li&gt;
&lt;li&gt;InspectCode&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Package&lt;/li&gt;
&lt;li&gt;Publish&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id="intellisense"&gt;Intellisense&lt;/h1&gt;
&lt;p&gt;To have Intellisense in VS Code for Cake, just run the &lt;code&gt;Cake: Install Intellisense Support&lt;/code&gt; and &lt;code&gt;OmniSharp: Restart OmniSharp&lt;/code&gt; commands in VS Code.&lt;/p&gt;
</content:encoded>
		</item>
		<item>
			<title>Creating styled boxes for a Wyam site</title>
			<link>http://fanioz.github.io/posts/creating-styled-boxes</link>
			<description>&lt;p&gt;Sometimes you want to indicate a piece of information is more important then the rest. To do this you can create styled boxes with CSS. I used an example from &lt;a href="https://www.madcapsoftware.com/blog/2017/08/17/css-tip-creating-styled-boxes-notes-warnings-examples-tips/"&gt;madcapsoftware.com&lt;/a&gt; and applied it to Wyam.&lt;/p&gt;</description>
			<author>Johan Vergeer</author>
			<guid>http://fanioz.github.io/posts/creating-styled-boxes</guid>
			<pubDate>Mon, 11 Mar 2019 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;Sometimes you want to indicate a piece of information is more important then the rest. To do this you can create styled boxes with CSS. I used an example from &lt;a href="https://www.madcapsoftware.com/blog/2017/08/17/css-tip-creating-styled-boxes-notes-warnings-examples-tips/"&gt;madcapsoftware.com&lt;/a&gt; and applied it to Wyam.&lt;/p&gt;
&lt;p&gt;I did not create a NuGet package for this functionality (yet). But it is fairly simple to create the boxes yourself.&lt;/p&gt;
&lt;p&gt;The boxes we'll create are:&lt;/p&gt;
&lt;?# Note ?&gt;
&lt;p&gt;Note&lt;/p&gt;
&lt;?#/ Note ?&gt;
&lt;?# Warning ?&gt;
&lt;p&gt;Warning&lt;/p&gt;
&lt;?#/ Warning ?&gt;
&lt;?# Example ?&gt;
&lt;p&gt;Example&lt;/p&gt;
&lt;?#/ Example ?&gt;
&lt;?# Tip ?&gt;
&lt;p&gt;Tip&lt;/p&gt;
&lt;?#/ Tip ?&gt;
&lt;h1 id="create-css"&gt;Create CSS&lt;/h1&gt;
&lt;p&gt;The CSS is to as hard as it might seem. The first part is the general box class.
As you can see, you'll need to create a &lt;code&gt;div&lt;/code&gt; element with a &lt;code&gt;box&lt;/code&gt; class.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-css"&gt;div.box {
     font-size: 1rem;
     -moz-border-radius: 6px;
     -webkit-border-radius: 6px;
     background-position: 9px 0px;
     background-repeat: no-repeat;
     border-radius: 6px;
     line-height: 18px;
     overflow: hidden;
     padding: 15px 60px;
     margin: 10px 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will get you a box, but not the desired colors. For this we'll create four more css classes:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-css"&gt;div.box-note {
     background-color: #f0f7fb;
     background-image: url(../images/icons/Pencil-48.png);
     border: solid 1px #3498db;
}

div.box-warning {
     background-color: #FCF7F2;
     background-image: url(../images/icons/Warning-48.png);
     border: solid 1px #E64636;
}

div.box-example {
     background-color: #E7F6F0;
     background-image: url(../images/icons/Check-48.png);
     border: solid 1px #2BCB6F;
}

div.box-tip {
     background-color: #FFFBEA;
     background-image: url(../images/icons/Lightbulb-48.png);
     border: solid 1px #F1C40F;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Each class defines a &lt;code&gt;background-color&lt;/code&gt;, a &lt;code&gt;color&lt;/code&gt; and a &lt;code&gt;background-image&lt;/code&gt;.&lt;/p&gt;
&lt;h1 id="create-wyam-shortcodes"&gt;Create Wyam Shortcodes&lt;/h1&gt;
&lt;p&gt;We can create some shortcodes in &lt;code&gt;config.wyam&lt;/code&gt;. These shortcodes are all it takes to create the styled boxes.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;ShortcodeCollection.Add(&amp;quot;Note&amp;quot;, (string x) =&amp;gt; $&amp;quot;&amp;lt;div class='box box-note'&amp;gt;{x}&amp;lt;/div&amp;gt;&amp;quot;);

ShortcodeCollection.Add(&amp;quot;Warning&amp;quot;, (string x) =&amp;gt; $&amp;quot;&amp;lt;div class='box box-warning'&amp;gt;{x}&amp;lt;/div&amp;gt;&amp;quot;);

ShortcodeCollection.Add(&amp;quot;Example&amp;quot;, (string x) =&amp;gt; $&amp;quot;&amp;lt;div class='box box-example'&amp;gt;{x}&amp;lt;/div&amp;gt;&amp;quot;);

ShortcodeCollection.Add(&amp;quot;Tip&amp;quot;, (string x) =&amp;gt; $&amp;quot;&amp;lt;div class='box box-tip'&amp;gt;{x}&amp;lt;/div&amp;gt;&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id="use-the-shortcodes"&gt;Use the Shortcodes&lt;/h1&gt;
&lt;p&gt;After defining the shortcodes in &lt;code&gt;config.wyam&lt;/code&gt;, you can use them. The code I used to create the boxes above is this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-markdown"&gt;&amp;lt;?# Note ?&amp;gt;
Note
&amp;lt;?#/ Note ?&amp;gt;

&amp;lt;?# Warning ?&amp;gt;
Warning
&amp;lt;?#/ Warning ?&amp;gt;

&amp;lt;?# Example ?&amp;gt;
Example
&amp;lt;?#/ Example ?&amp;gt;

&amp;lt;?# Tip ?&amp;gt;
Tip
&amp;lt;?#/ Tip ?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That's all, folks.&lt;/p&gt;
</content:encoded>
		</item>
	</channel>
</rss>