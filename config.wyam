#recipe Blog

#t BlogTemplate

#n Wyam.SearchIndex

using System.Collections.Generic;
using System.IO;

using YamlDotNet.Core;
using YamlDotNet.Core.Events;
using YamlDotNet.Serialization;
using YamlDotNet.Serialization.NamingConventions;

// Customize your settings and add new ones here
Settings[Keys.Host] = "johanvergeer.github.io";
Settings[BlogKeys.Title] = "I'm Johan";
Settings[BlogKeys.Description] = "Welcome!";

int renderPagesIndex = Pipelines.IndexOf(Blog.RenderPages);
Pipelines.Remove(Blog.RenderPages);
Pipelines.Insert(
	renderPagesIndex, 
	Blog.RenderPages,
    (IPipeline)new Wyam.Web.Pipelines.RenderPages(
        Blog.RenderPages,
        new Wyam.Web.Pipelines.RenderPagesSettings
        {
            Pipelines = new string[] { "Pages" },
			// Use `Layout` in frontmatter to set a different Layout
			// Default is _Layout
            Layout = (doc, ctx) => doc.String("Layout", "/_Layout.cshtml")
        }
	)
);

class GlossaryItem {
	public string Name { get; set; }
	public IEnumerable<string> Authors { get; set; } = new List<string>();
	public string WebPageName { get; set; }
	public string WebsiteName { get; set; }
	public int Year { get; set; }
	public int Month { get; set; }
	public int Day { get; set; }
	public string Url { get; set; }
}

class Glossary {
	public List<GlossaryItem> Items { get; set; } = new List<GlossaryItem>();
}

var glossary = new Dictionary<string, GlossaryItem>();

using(var glossaryInput = new StreamReader("input/glossary.yml"))
{
	var yamlNamingConvention = new CamelCaseNamingConvention();

	var deserializer = new DeserializerBuilder()
		.WithNamingConvention(yamlNamingConvention)
		.Build();

	var parser = new Parser(glossaryInput);

	// Consume the stream start event "manually"
	parser.Expect<StreamStart>();

	while (parser.Accept<DocumentStart>())
	{
		// Deserialize the document
		var glossaryItem = deserializer.Deserialize<GlossaryItem>(parser);
		glossary.Add(glossaryItem.Name, glossaryItem);
	}
}

ShortcodeCollection.Add("Glossary", (string name) => {
	try
	{
		var item = glossary[name];
		return $"[{string.Join(", ", item.Authors)}, {item.Year}]";
	}
	catch 
	{
		Wyam.Common.Tracing.Trace.Warning($"No glossary item found with name {name}");
		return $"[{name} NOT FOUND]" ;
	}
});

ShortcodeCollection.Add("Note", (string x) => $"<div class='box box-note'>{x}</div>");
ShortcodeCollection.Add("Warning", (string x) => $"<div class='box box-warning'>{x}</div>");
ShortcodeCollection.Add("Example", (string x) => $"<div class='box box-example'>{x}</div>");
ShortcodeCollection.Add("Tip", (string x) => $"<div class='box box-tip'>{x}</div>");
