#recipe Blog

#t BlogTemplate

#n Wyam.SearchIndex

using System.Collections.Generic;
using System.IO;

using YamlDotNet.Core;
using YamlDotNet.Core.Events;
using YamlDotNet.Serialization;
using YamlDotNet.Serialization.NamingConventions;

// Customize your settings and add new ones here
Settings[Keys.Host] = "johanvergeer.github.io";
Settings[BlogKeys.Title] = "I'm Johan";
Settings[BlogKeys.Description] = "Welcome!";

int renderPagesIndex = Pipelines.IndexOf(Blog.RenderPages);
Pipelines.Remove(Blog.RenderPages);
Pipelines.Insert(
	renderPagesIndex, 
	Blog.RenderPages,
    (IPipeline)new Wyam.Web.Pipelines.RenderPages(
        Blog.RenderPages,
        new Wyam.Web.Pipelines.RenderPagesSettings
        {
            Pipelines = new string[] { "Pages" },
			// Use `Layout` in frontmatter to set a different Layout
			// Default is _Layout
            Layout = (doc, ctx) => doc.String("Layout", "/_Layout.cshtml")
        }
	)
);

class GlossaryItem {
	public string Name { get; set; }
	public IEnumerable<string> Authors { get; set; }
	public string WebPageName { get; set; }
	public string WebsiteName { get; set; }
	public int Year { get; set; }
	public int Month { get; set; }
	public int Day { get; set; }
	public string Url { get; set; }
}

class Glossary {
	public List<GlossaryItem> Items { get; set; } = new List<GlossaryItem>();
}

var glossary = new Glossary();

using(var glossaryInput = new StreamReader("input/glossary.yml"))
{
	var yamlNamingConvention = new CamelCaseNamingConvention();

	var deserializer = new DeserializerBuilder()
		.WithNamingConvention(yamlNamingConvention)
		.Build();

	var parser = new Parser(glossaryInput);

	// Consume the stream start event "manually"
	parser.Expect<StreamStart>();

	while (parser.Accept<DocumentStart>())
	{
		// Deserialize the document
		var glossaryItem = deserializer.Deserialize<GlossaryItem>(parser);
		glossary.Items.Add(glossaryItem);
		System.Console.WriteLine(glossaryItem.Name);
	}
}

// var replace = new Replace("MyFoo", "YourBar");
// var include = new Include();

// Pipelines[Blog.RenderBlogPosts].Insert(0, "Include", include);
//Pipelines[Blog.RenderBlogPosts].Insert(1, "Replace", replace);

// Pipelines.InsertAfter(
// 	Blog.RenderBlogPosts,
// 	"Replace",
//  	ReadFiles("posts/*.html"),
//   	Replace("MyFoo", "YourBar"),
//  	WriteFiles(".html")
// );

// Pipelines.InsertBefore(
// 	Blog.RenderBlogPosts,
// 	"Include",
//  	ReadFiles("posts/*.md"),
//   	Include(),
//  	WriteFiles(".md")
// );

// Pipelines.InsertBefore(
// 	Blog.RenderBlogPosts, 
// 	"Replace",
//     Documents(Blog.BlogPosts),
//     Execute(ctx => Replace("MyFoo", "YourBar")),
//     WriteFiles()
// );

// int renderBlogPostsIndex = Pipelines.IndexOf(Blog.RenderBlogPosts);
// Pipelines.Remove(Blog.RenderBlogPosts);
// Pipelines.Insert(
// 	renderBlogPostsIndex,
// 	Blog.RenderBlogPosts,
// 	(IPipeline)new Wyam.Web.Pipelines.RenderBlogPosts(
// 		Blog.RenderBlogPosts,
// 		new Wyam.Web.Pipelines.RenderBlogPostsSettings
// 		{
// 			Pipelines = new string[] { "BlogPosts" },
// 			PublishedKey = "Published"
// 		}
// 	)
// );



ShortcodeCollection.Add("Note", (string x) => $"<div class='box box-note'>{x}</div>");
ShortcodeCollection.Add("Warning", (string x) => $"<div class='box box-warning'>{x}</div>");
ShortcodeCollection.Add("Example", (string x) => $"<div class='box box-example'>{x}</div>");
ShortcodeCollection.Add("Tip", (string x) => $"<div class='box box-tip'>{x}</div>");
