#recipe Blog

#t BlogTemplate

#n Wyam.SearchIndex

using	 System.IO;
using System.Xml.Linq;

using YamlDotNet.Core;
using YamlDotNet.Core.Events;
using YamlDotNet.Serialization;
using YamlDotNet.Serialization.NamingConventions;

public class Card : IShortcode
{
	/// <inheritdoc />
	public IShortcodeResult Execute(KeyValuePair<string, string>[] args, string content, IDocument document, IExecutionContext context)
	{
		ConvertingDictionary arguments = args.ToDictionary(
			context,
			"Src",
			"Link",
			"Target",
			"Rel",
			"Alt",
			"Class",
			"Height",
			"Width");

		XElement root = new XElement(
			"div",
			new XAttribute("class", "row")
		);

		XElement col = new XElement(
			"div",
			new XAttribute("class", "col-md-12")
		);

		XElement card = new XElement(
			"div",
			new XAttribute("class", "card")
		);

		root.Add(col);
		col.Add(card);
		card.Add(_createCardHeader("Uncle Bob"));
		card.Add(_createCardBody(content));

		// Image link
		// XElement imageLink = arguments.XElement("a", "link", x => new[]
		// {
		// 	new XAttribute("href", context.GetLink(x)),
		// 	arguments.XAttribute("target"),
		// 	arguments.XAttribute("rel")
		// });

		// // Image
		// XElement image = arguments.XElement("img", "src", x => new[]
		// {
		// 	new XAttribute("src", context.GetLink(x)),
		// 	arguments.XAttribute("alt"),
		// 	arguments.XAttribute("height"),
		// 	arguments.XAttribute("width")
		// });
		// if (imageLink != null && image != null)
		// {
		// 	imageLink.Add(image);
		// 	figure.Add(imageLink);
		// }
		// else if (image != null)
		// {
		// 	figure.Add(image);
		// }

		// // Caption
		// if (content != null)
		// {
		// 	figure.Add(new XElement("figcaption", content));
		// }

		return context.GetShortcodeResult(root.ToString());
	}

	private XElement _createCardHeader(string title)
	{
		XElement cardHeader = new XElement(
			"div",
			new XAttribute("class", "card-header card-header-text card-header-primary")
		);

		XElement cardHeaderText = new XElement(
			"div",
			new XAttribute("class", "card-text")
		);

		XElement cardTitle = new XElement(
			"div",
			new XAttribute("Class", "card-title"),
			title
		);

		cardHeader.Add(cardHeaderText);
		cardHeaderText.Add(cardTitle);

		return cardHeader;
	}

	private XElement _createCardBody(string content)
	{
		XElement cardBody = new XElement(
			"div",
			new XAttribute("class", "card-body"),
			content.Trim()
		);

		return cardBody;
	}
}

// Customize your settings and add new ones here
Settings[Keys.Host] = "johanvergeer.github.io";
Settings[Keys.DateTimeInputCulture] = "nl-NL";
Settings[BlogKeys.Title] = "I'm Johan";
Settings[BlogKeys.Description] = "Welcome!";

int renderPagesIndex = Pipelines.IndexOf(Blog.RenderPages);
Pipelines.Remove(Blog.RenderPages);
Pipelines.Insert(
	renderPagesIndex, 
	Blog.RenderPages,
    (IPipeline)new Wyam.Web.Pipelines.RenderPages(
        Blog.RenderPages,
        new Wyam.Web.Pipelines.RenderPagesSettings
        {
            Pipelines = new string[] { "Pages" },
			// Use `Layout` in frontmatter to set a different Layout
			// Default is _Layout
            Layout = (doc, ctx) => doc.String("Layout", "/_Layout.cshtml")
        }
	)
);

int renderBlogPostsIndex = Pipelines.IndexOf(Blog.RenderBlogPosts);
Pipelines.Remove(Blog.RenderBlogPosts);
Pipelines.Insert(
	renderBlogPostsIndex,
	Blog.RenderBlogPosts,
	ReadFiles("posts/*.md"),
	FrontMatter(Yaml()),
	Meta("SearchIndexItem", 
		new SearchIndexItem("/" + @doc.String(Keys.RelativeFilePathBase), @doc.String("Title"), @doc.Content) 
			{ 
				Description = @doc.String("Description"), 
				Tags = @doc.String("Tags") 
			}
	),
	Markdown(),
	Excerpt(),
	Razor(),
	WriteFiles(".html")
);


Pipelines.Add("SearchIndex",
	Documents(Blog.RenderBlogPosts),
	SearchIndex((FilePath)"stopwords.txt"),
	WriteFiles((doc,ctx) => string.IsNullOrEmpty(doc.Content) ? null : "searchindex.js").UseWriteMetadata(false)
);

class GlossaryItem {
	public string Name { get; set; }
	public IEnumerable<string> Authors { get; set; } = new List<string>();
	public string WebPageName { get; set; }
	public string WebsiteName { get; set; }
	public int Year { get; set; }
	public int Month { get; set; }
	public int Day { get; set; }
	public string Url { get; set; }
}

class Glossary {
	public List<GlossaryItem> Items { get; set; } = new List<GlossaryItem>();
}

var glossary = new Dictionary<string, GlossaryItem>();

using(var glossaryInput = new StreamReader("input/glossary.yml"))
{
	var yamlNamingConvention = new CamelCaseNamingConvention();

	var deserializer = new DeserializerBuilder()
		.WithNamingConvention(yamlNamingConvention)
		.Build();

	var parser = new Parser(glossaryInput);

	// Consume the stream start event "manually"
	parser.Expect<StreamStart>();

	while (parser.Accept<DocumentStart>())
	{
		// Deserialize the document
		var glossaryItem = deserializer.Deserialize<GlossaryItem>(parser);
		glossary.Add(glossaryItem.Name, glossaryItem);
	}
}

ShortcodeCollection.Add("Glossary", (string name) => {
	try
	{
		var item = glossary[name];
		return $"[{string.Join(", ", item.Authors)}, {item.Year}]";
	}
	catch 
	{
		Wyam.Common.Tracing.Trace.Warning($"No glossary item found with name {name}");
		return $"[{name} NOT FOUND]" ;
	}
});

ShortcodeCollection.Add("Note", (string x) => $"<div class='box box-note'>{x}</div>");
ShortcodeCollection.Add("Warning", (string x) => $"<div class='box box-warning'>{x}</div>");
ShortcodeCollection.Add("Example", (string x) => $"<div class='box box-example'>{x}</div>");
ShortcodeCollection.Add("Tip", (string x) => $"<div class='box box-tip'>{x}</div>");
ShortcodeCollection.Add(typeof(Card));

