<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <link rel="apple-touch-icon" sizes="76x76" href="../assets/img/apple-icon.png">
    <link rel="icon" type="image/png" href="../assets/img/favicon.png">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" />
    <title>
        @Model.WithoutSettings.String(BlogKeys.Title)
    </title>
    <meta content='width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0, shrink-to-fit=no' name='viewport' />
    
    <!--     Fonts and icons     -->
    <link rel="stylesheet" type="text/css" href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700|Roboto+Slab:400,700|Material+Icons" />
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/latest/css/font-awesome.min.css">
    
    <!-- CSS Files -->
    <link href="../assets/css/material-kit.css?v=2.0.5" rel="stylesheet" />
</head>
<body>
@if(Context.String(BlogKeys.Description) != null)
{
    <a href="@Context.GetLink("/")"><h1>@Context.String(BlogKeys.Description)</h1> </a>
}
@if(Context.String(BlogKeys.Intro) != null)
{            
    @if(Context.String(BlogKeys.Description) != null)
    {
        <hr>
    }
    <span>@Context.String(BlogKeys.Intro)</span>
}

@{
    List<Tuple<string, string>> pages = Context
        .Documents[Blog.Pages]
        .Where(x => x.Bool(BlogKeys.ShowInNavbar, true))
        .Where(x => x.FilePath(Keys.RelativeFilePath)?.FullPath?.StartsWith("index") == (bool?)false)
        .Select(x => Tuple.Create(x.WithoutSettings.String(Keys.Title), Context.GetLink(x)))
        .Where(x => !string.IsNullOrEmpty(x.Item1))
        .OrderBy(x => x.Item1)
        .ToList();
        
        if(Documents[Blog.Tags].Any())
        {
            pages.Insert(0, Tuple.Create("Tags", Context.GetLink("tags/index.html")));
        }

        if(Documents[Blog.BlogPosts].Any() && Context.Bool(BlogKeys.GenerateArchive))
        {
            pages.Insert(0, Tuple.Create("ArchiveP", Context.GetLink(Context.String(BlogKeys.PostsPath) + "/index.html")));
        }
    
        foreach(Tuple<string, string> page in pages)
        {
            <li>
                <a href="@(page.Item2)">@(page.Item1)</a>
            </li>
        }
}

@RenderBody()

</body>
</html>
